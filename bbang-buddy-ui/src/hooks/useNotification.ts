'use client';

import { useEffect, useRef } from 'react';
import useNotificationStore from '../store/useNotificationStore';
import { useAuthStore } from '../store/useAuthStore';
import { getCookie } from '../utils/cookieUtils';
import { isBrowser } from '@/utils/typeUtils';

const useNotification = () => {
  const { getNotifications, addNotification } = useNotificationStore();
  const { isAuthenticated } = useAuthStore();
  const eventSourceRef = useRef<EventSource | null>(null);
  const token = getCookie('authToken');

  const getApiUrl = () => {
    if (isBrowser() && window.location.hostname === 'localhost') {
      return process.env.NEXT_PUBLIC_LOCAL_API_BASE_URL;
    }
    if (process.env.NEXT_PUBLIC_API_BASE_URL) {
      return process.env.NEXT_PUBLIC_API_BASE_URL;
    }

    // TODO: Î∞∞Ìè¨ ÌôòÍ≤ΩÏóêÏÑúÎäî ÌòÑÏû¨ ÎèÑÎ©îÏù∏ ÏÇ¨Ïö© ÌÖåÏä§Ìä∏ (CORS Î¨∏Ï†ú Ìï¥Í≤∞)
    // if (isBrowser()) {
    //     return window.location.origin;
    // }

    return process.env.NEXT_PUBLIC_LOCAL_API_BASE_URL;
  };

  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç useEffect ÏßÑÏûÖ:', {
        isAuthenticated,
        token,
        tokenExists: !!token,
        tokenValue: token,
      });
    }

    if (!isAuthenticated || !token) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ùå Ï°∞Í±¥ ÎØ∏Ï∂©Ï°±ÏúºÎ°ú return:', {
          isAuthenticated,
          token,
        });
      }
      return;
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ Ï°∞Í±¥ ÌÜµÍ≥º, setupSSEConnection ÏãúÏûë');
    }

    const setupSSEConnection = async () => {
      try {
        if (eventSourceRef.current) {
          if (process.env.NODE_ENV === 'development') {
            console.log('üîÑ Í∏∞Ï°¥ SSE Ïó∞Í≤∞ Ï¢ÖÎ£å Ï§ë...');
          }
          eventSourceRef.current.close();
        }

        const currentToken = getCookie('authToken');
        const apiUrl = getApiUrl();
        const sseUrl = `${apiUrl}/api/notification/subscribe?token=${encodeURIComponent(currentToken || '')}`;

        if (process.env.NODE_ENV === 'development') {
          console.log('üöÄ SSE Ïó∞Í≤∞ ÏãúÎèÑ:', {
            url: `${apiUrl}/api/notification/subscribe?token=***`,
            isAuthenticated,
            tokenExists: !!currentToken,
            tokenPreview: currentToken
              ? `${currentToken.substring(0, 20)}...`
              : 'null',
          });
        }

        const eventSource = new EventSource(sseUrl);
        eventSourceRef.current = eventSource;

        eventSource.onmessage = (event) => {
          if (process.env.NODE_ENV === 'development') {
            console.log('üì• ÏÉà ÏïåÎ¶º ÏàòÏã†:', {
              rawData: event.data,
              timestamp: new Date().toISOString(),
            });
          }

          try {
            const notification = JSON.parse(event.data);

            if (process.env.NODE_ENV === 'development') {
              console.log('‚úÖ ÏïåÎ¶º ÌååÏã± ÏÑ±Í≥µ:', notification);
            }

            addNotification(notification);
            if (process.env.NODE_ENV === 'development') {
              console.log('‚úÖ Ïä§ÌÜ†Ïñ¥Ïóê ÏïåÎ¶º Ï∂îÍ∞Ä ÏôÑÎ£å');
            }
          } catch (error) {
            if (process.env.NODE_ENV === 'development') {
              console.error('‚ùå ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïò§Î•ò:', {
                error,
                rawData: event.data,
              });
            }
          }
        };

        eventSource.onopen = () => {
          if (process.env.NODE_ENV === 'development') {
            console.log('‚úÖ SSE Ïó∞Í≤∞ ÏÑ±Í≥µ');
          }
        };

        eventSource.onerror = (error) => {
          if (process.env.NODE_ENV === 'development') {
            console.error('‚ùå SSE Ïó∞Í≤∞ Ïò§Î•ò:', {
              error,
              readyState: eventSource.readyState,
              url: eventSource.url,
            });
          }
          if (eventSource.readyState !== EventSource.CLOSED) {
            eventSource.close();
          }
          eventSourceRef.current = null;

          if (process.env.NODE_ENV === 'development') {
            console.log('üîÑ 5Ï¥à ÌõÑ ÏàòÎèô Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...');
          }
          setTimeout(() => {
            const currentToken = getCookie('authToken');
            const { isAuthenticated } = useAuthStore.getState();

            if (process.env.NODE_ENV === 'development') {
              console.log('üîç Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ:', {
                isAuthenticated,
                currentToken: currentToken,
                hasEventSource: !!eventSourceRef.current,
              });
            }

            if (isAuthenticated && currentToken && !eventSourceRef.current) {
              setupSSEConnection();
            } else {
              if (process.env.NODE_ENV === 'development') {
                console.warn('‚ùå Ïû¨Ïó∞Í≤∞ Ï°∞Í±¥ ÎØ∏Ï∂©Ï°±');
              }
            }
          }, 5000);
        };
      } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          console.error('ÏïåÎ¶º Íµ¨ÎèÖ Ïã§Ìå®:', error);
        }
      }
    };

    setupSSEConnection();

    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
        eventSourceRef.current = null;
      }
    };
  }, [isAuthenticated, token, addNotification]);

  const checkForNewNotifications = async () => {
    try {
      if (token) {
        await getNotifications();
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('ÏïåÎ¶º ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
      }
    }
  };

  return {
    checkForNewNotifications,
  };
};

export default useNotification;
