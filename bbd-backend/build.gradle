buildscript {
    ext {
        queryDslVersion = "5.0.0"
        appName = "bbd-backend"
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.bbangbuddy'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    //Netty가 macOS에서 DNS 네이티브 라이브러리(io.netty:netty-resolver-dns-native-macos)를 찾지 못해 발생하는 에러 제거
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.101.Final'

    //h2
    implementation 'com.h2database:h2:2.1.214'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    annotationProcessor(
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            "jakarta.annotation:jakarta.annotation-api",
            "jakarta.persistence:jakarta.persistence-api"
    )

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Utilities
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Firebase Admin SDK
    implementation 'com.google.firebase:firebase-admin:8.1.0'

    // Database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDirs += [ querydslDir ]
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

springBoot {
    mainClass = 'com.bbangbuddy.BbangBuddyApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveBaseName = "${appName}"
    archiveFileName = "${appName}.jar"
}

bootRun {
    systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "local")
}

clean {
    delete file(querydslDir)
}